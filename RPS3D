class RPS3D(object):
    def __init__(self, 
                 sf: Union[float, Tuple[float, float]] = 1.0,
                 p: float = 1.0):
        self.swap_factor = sf
        self.augmentation_prob = p
        self.s = 1 
        
    def __call__(self, x: torch.Tensor) -> torch.Tensor:
        if random.random() > self.augmentation_prob:
            return x

        if not isinstance(x, torch.Tensor):
            raise ValueError("Input must be a torch.Tensor for 3D RPS")
        if x.ndim != 4:
            raise ValueError("Input tensor must be 4D (CxDxHxW)")

        device, dtype = x.device, x.dtype
        x_np = x.permute(1, 2, 3, 0).cpu().numpy() 

        if isinstance(self.swap_factor, tuple):
            swap_ratio = random.uniform(*self.swap_factor)
        else:
            swap_ratio = float(self.swap_factor)

        d, h, w = x_np.shape[0], x_np.shape[1], x_np.shape[2]
        d_half, h_half, w_half = d//2, h//2, w//2
        u = h//2  
        
        def get_points(length):
            points = list(range(self.s, length-self.s, self.s))
            points = random.sample(points, 2)
            points.sort()
            return [int(p*swap_ratio) for p in points]
        
        d_points = get_points(d)
        h_points = get_points(h)
        w_points = [p//2 for p in h_points]
        w1, w2 = w_points[0] + w_half, w_points[1] + w_half
        
        w_vert_points = get_points(w)
        hw_points = [p//2 for p in w_vert_points]
        hw1, hw2 = hw_points[0] + h_half, hw_points[1] + h_half
        
        d_diag_points = get_points(u)
        d1, d2 = [p + u for p in d_diag_points]

        def process_volume(vol, crop_coords):
            roi1 = vol[
                crop_coords[0][0]:crop_coords[0][1],
                crop_coords[0][2]:crop_coords[0][3],
                crop_coords[0][4]:crop_coords[0][5]
            ].copy()
            
            roi2 = vol[
                crop_coords[1][0]:crop_coords[1][1],
                crop_coords[1][2]:crop_coords[1][3],
                crop_coords[1][4]:crop_coords[1][5]
            ].copy()
            
            deleted = vol.copy()
            deleted[
                crop_coords[0][0]:crop_coords[0][1],
                crop_coords[0][2]:crop_coords[0][3],
                crop_coords[0][4]:crop_coords[0][5]
            ] = 0
            
            deleted[
                crop_coords[1][0]:crop_coords[1][1],
                crop_coords[1][2]:crop_coords[1][3],
                crop_coords[1][4]:crop_coords[1][5]
            ] = 0
            
            return deleted, roi1, roi2

        transformations = {
            'axial': [
                (0, d, h_points[0], h_points[1], w_points[0], w_points[1]),
                (0, d, h_points[0], h_points[1], w1, w2)
            ],
            'coronal': [
                (0, d, h_points[0], h_points[1], w_points[0], w_points[1]),
                (0, d, h_points[0], h_points[1], w1, w2)
            ],
            'sagittal': [
                (d_points[0], d_points[1], 0, h, w_points[0], w_points[1]),
                (d_points[0], d_points[1], 0, h, w1, w2)
            ],
            'diagonal': [
                (d_diag_points[0], d_diag_points[1], 
                 d_diag_points[0], d_diag_points[1] + u,
                 d_diag_points[1], d_diag_points[1] + u),
                (d1, d_diag_points[0], 
                 d2, d_diag_points[0] + u,
                 d_diag_points[1], d_diag_points[1] + u)
            ]
        }

        results = {}
        for key, coords in transformations.items():
            deleted, p1, p2 = process_volume(x_np, coords)
            results[key] = (deleted, p1, p2, coords)

        new_samples = [
            self._paste_patches_3d(results['axial'][0], [
                ((0, h_points[0], w1), results['axial'][1]),
                ((0, h_points[0], w_points[0]), results['axial'][2])
            ]),
            self._paste_patches_3d(results['coronal'][0], [
                ((0, h_points[0], w1), results['coronal'][1]),
                ((0, h_points[0], w_points[0]), results['coronal'][2])
            ]),
            self._paste_patches_3d(results['sagittal'][0], [
                ((d_points[0], 0, w1), results['sagittal'][1]),
                ((d_points[0], 0, w_points[0]), results['sagittal'][2])
            ]),
            self._paste_patches_3d(results['diagonal'][0], [
                ((d1, d_diag_points[0], d_diag_points[1]), results['diagonal'][1]),
                ((d_diag_points[0], d_diag_points[0] + u, d_diag_points[1] + u), results['diagonal'][2])
            ])
        ]
        
        random.shuffle(new_samples)
        output = random.choice(new_samples)

        output = torch.from_numpy(output).permute(3, 0, 1, 2).to(device=device, dtype=dtype)
        
        return output
    
    def _paste_patches_3d(self, base_vol, patches):
        vol = base_vol.copy()
        for (d_start, h_start, w_start), patch in patches:
            d_end = d_start + patch.shape[0]
            h_end = h_start + patch.shape[1]
            w_end = w_start + patch.shape[2]
            
            vol[
                d_start:d_end,
                h_start:h_end,
                w_start:w_end
            ] = patch
            
        return vol
